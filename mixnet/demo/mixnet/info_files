#!/bin/sh

# Copyright 2008 2009 2010 Douglas Wikstrom

# This file is part of Vfork.

# Vfork is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# Vfork is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with Vfork.  If not, see
# <http://www.gnu.org/licenses/>.

# Read configuration.
. ./conf

feedstart "Making directories of servers"

# Make directories and copy seedfile.
for i in `seq 1 $NO_MIXSERVERS`
do
    mkdirat $i
done

feedend


###########################################################################
####### Generate protocol info file containing global parameters. #########
###########################################################################

feedstart "Defining group of prime order"
if test $PGROUP_TYPE = "fixed";
then
    PGROUP=$(vog -gen ModPGroup -fixed $BIT_SIZE)
elif test $PGROUP_TYPE = "rand_sg";
then
    if test x$OBIT_SIZE = x;
    then
	OBIT_SIZE=$(($BIT_SIZE-8))
    fi
    PGROUP=$(vog -gen ModPGroup -rand $BIT_SIZE $OBIT_SIZE)
elif test $PGROUP_TYPE = "rand_ro";
then
    if test x$OBIT_SIZE = x;
    then
	OBIT_SIZE=$(($BIT_SIZE-100))
    fi
    PGROUP=$(vog -gen ModPGroup -roenc -rand $BIT_SIZE $OBIT_SIZE)
#else "explicit"
    # It is assumed that PGROUP is manually initialized to a an
    # explicit group.
fi
feedend

feedstart "Generating protocol stub file"

echo "
vmni -prot \
-sid 'MyDemo' \
-name 'Swedish Election' \
-nopart $NO_MIXSERVERS \
-thres $THRESHOLD \
-maxciph '$MAX_NO_CIPHERTEXTS' \
-corr '$CORRECTNESS' \
-prg '$PRG' \
-inter '$INTER' \
-pgroup '$PGROUP' \
-width '$WIDTH' " > $TMP_COMMAND

cpevalat $TMP_COMMAND 1

feedend


###########################################################################
######## Share protocol info file containing global parameters. ###########
###########################################################################
for i in `seq 2 $NO_MIXSERVERS`
do
    feedstart "Copy stub file to Party $i"
    copyfromto stub.xml 1 $i
    feedend
done

###########################################################################
######## Generate private and protocol info files of each party. ##########
###########################################################################

# Group over which Cramer-Shoup keys are defined. In the real protocol
# each user can have its own group. The groups need not even be of the
# same type. Note that this group must allow encoding arbitrary
# messages. It is not acceptable to have a group with random mapping.

CSGROUP=$(vog -gen ModPGroup -fixed "$BIT_SIZE")

for i in `seq 1 $NO_MIXSERVERS`
do
    feedstart "Generating private and protocol files of Party $i"
    gethn HOST $i
    HINTPORT=`expr $HINTOFFSET + $i`
    HTTPPORT=`expr $HTTPOFFSET + $i`

    # Use fixed seed for easy debugging.
    copyto seedfile $i 

    # Determines the hashfunction used to implement the cryptosystem
    # and the signature scheme.
    if test $HASH = "STANDARD";
    then
	echo "
HASH=\$(vog -gen HashfunctionHeuristic SHA-256)" > $TMP_COMMAND
    else
	echo "
HASHGROUP=\$(vog -gen JECPGroup -name prime256v1)
HASHFIXED=\$(vog -gen HashfunctionPedersen \"\$HASHGROUP\")
HASH=\$(vog -gen HashfunctionMerkleDamgaard \"\$HASHFIXED\")" > $TMP_COMMAND
    fi

    # Determines signature scheme used.
    if test $SIG = "STANDARD";
    then
	echo "
SSKEYGEN=\$(vog -gen SignatureKeyGenHeuristic 1024)" >> $TMP_COMMAND
    else
	echo "
SSKEYGEN=\$(vog -gen SignatureKeyGenCS -crhf \"\$HASH\" 1024)" >> $TMP_COMMAND
    fi

    echo "
CSKEYGEN=\$(vog -gen CryptoKeyGenCramerShoup \"$CSGROUP\" \"\$HASH\")

KEYPAIR=\$(vog -gen SignatureKeyPair \"\$SSKEYGEN\")
PKEY=\$(vog -gen SignaturePKey \"\$KEYPAIR\")

vmni -party \
-name \"Party$i\" \
-keygen \"\$CSKEYGEN\" \
-seed seedfile \
-skey \"\$KEYPAIR\" \
-pkey \"\$PKEY\" \
-rand '$RAND' \
-hint '$HOST:$HINTPORT' \
-http 'http://$HOST:$HTTPPORT' \
-arrays '$ARRAYS'; \
cp localProtInfo.xml protInfo$i.xml" >> $TMP_COMMAND

    cpevalat $TMP_COMMAND $i
    feedend
done



###########################################################################
######## Share protocol info file containing global parameters. ###########
###########################################################################
for i in `seq 1 $NO_MIXSERVERS`
do
    for j in `seq 1 $NO_MIXSERVERS`
    do
	if test $i != $j;
	then
	    feedstart "Copy protocol file of Party $i to Party $j"
	    copyfromto protInfo$i.xml $i $j
	    feedend
	fi
    done
done

###########################################################################
###################### Merge protocol info files. #########################
###########################################################################

if test $NO_MIXSERVERS != 1;
then

    for i in `seq 1 $NO_MIXSERVERS`
    do
	feedstart "Merge protocol files to global protocol file at Party $i"
	evalat "vmni -merge protInfo*.xml" $i
	feedend
    done
else

    evalat "cp protInfo1.xml protInfo.xml" 1

fi
