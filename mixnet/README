

                       VFORK

Vfork provides a framework for implementing multiparty protocols
in Java. It was developed to implement a provably secure mix-net, but
the framework is quite general and several of the subprotocols are
useful without any changes to implement other complex
protocols. Vfork is modular and well documented to allow easy
use and verification.

For improved efficiency, the most time critical parts can optionally
be linked to routines in the GNU MP library (GMP), and GNU MP Modular
Exponentiation Extension (GMPMEE), using the Java wrapper Java GMPMEE
(JGMPMEE). All these packages are available under the Lesser GNU
General Public License version 3. GMP can be downloaded from
gmplib.org and GMPMEE and JGMPMEE can be downloaded from
www.mixnet.com. There is also native code for elliptic curves
through the Java elliptic curve native (JECN) package. In the future
more primitives may be implemented in this way if needed.

There is little to compare with, but we believe that this makes the
mix-net of Vfork almost as fast as if it was implemented
directly in C.

For information on how to use the mix-net we refer the reader to the
documentation at www.mixnet.com, or build it as described below.


                         BUILDING

0) If you are installing from the mixnet_full meta-package, then
   the commands below should be executed in that directory.

1) You need to install Sun's JDK6 (or something compatible, we can
   only guess what that would be), Python 2.5, and the GNU building
   tools. Depending on your operating system, some of these may
   already be installed.

2) Please use

        shell> ./configure
        shell> make

   to build the software.

3) If you want to use native code for modular exponentiations etc,
   then you must install GMP, GMPMEE, and JGMPMEE first. We refer the
   user to the installation instructions of these packages. Depending
   on your operating system, GMP may already be installed.

   Then the configure command above must be replaced by

        shell> ./configure --enable-jgmpmee

   The configure script tries to guess the locations of jni.h and
   jni_md.h, but you may need to set up C_INCLUDE_PATH on your own if
   this fails or if you want to use a specific JVM.

4) If you want to use native code for elliptic curves through the JECN
   package, then the above configure command must be replaced by

        shell> ./configure --enable-jecn
   
   You may of course combine this with --enable-jgmpmee.

5) Optionally, you may run a few unit tests, by

        shell> make check

6) Optionally, you may use

        shell> make doc

   to build the documentation that is also available online at
   www.mixnet.com. The documentation is not installed anywhere,
   but you may copy the documentation to any location after it is
   built by copying the doc subdirectory.


			 INSTALLING

   ##########################################################
   ##################### WARNING! ###########################
   ##########################################################
   #                                                        #
   # WARNING! Please read the following instructions        #
   # carefully. Failure to do so may result in a completely #
   # insecure installation.                                 #
   #                                                        #
   ##########################################################


1) Please use

        shell> make install

   to install the software. You may need to be root or use sudo.

2) You need to set a few environment variables. For Ubuntu and FreeBSD
   the simplest way to get this right is probably to copy the file
   .mixnet_env to your home directory and add

        source ~/.mixnet_env

   to an init script, e.g., to .bashrc. For other OS you may need to
   edit .mixnet_env manually. Then you may go back to the
   installation directory and run

        shell> ./checkinstall

   for some rudimentary checking that all the environment variables
   where set correctly.

3) The tools in the library, e.g., vog, that require a source of
   randomness to function, uses the random source defined by two files
   that by default are named:

       $HOME/.mixnet_random_source
             -- Stores a description of a random device or a PRG.

       $HOME/.mixnet_random_seed
             -- Stores a random seed if a PRG is used.

   Here $HOME denotes the home directory of the current user. The
   command vog is a script that invokes the java interpreter on the
   class mixnet.ui.gen.GeneratorTool.

   You may override the location of these files by setting the
   environment variables:

       VFORK_RANDOM_SOURCE
       VFORK_RANDOM_SEED

   ##########################################################
   ##################### WARNING! ###########################
   ##########################################################
   #                                                        #
   # If an adversary is able to write to any of these       #
   # files, then the software provides no security at all.  #
   #                                                        #
   # If an adversary is able to read from the second file,  #
   # then the software provides no security at all. The     #
   # contents of the first file can safely be made public.  #
   #                                                        #
   ##########################################################


4) You must initialize the master random source using the vog command,
   e.g., to use the standard BSD/Linux heuristically pseudo-random
   device /dev/urandom you would do:

       shell> vog -rndinit RandomDevice /dev/urandom
       Successfully initialized random source!
       shell>

   If you wish to use a PRG instead, then you need to provide a seed
   as well, e.g., to use a provably secure PRG under the DDH
   assumption you could execute:

       shell> vog -rndinit -seed seedfile PRGElGamal -fixed 1024
       Successfully initialized random source! Deleted seed file.
       shell>

   The command deletes the seed file to avoid accidental reuse.

   ##########################################################
   ##################### WARNING! ###########################
   ##########################################################
   #                                                        #
   # The provided seed file must contain bits that are      #
   # indistinguishable from truly random bits. The seed     #
   # bits must not be reused here or anywhere else.         #
   #                                                        #
   # Failure to provide a proper seed file may result in a  #
   # catastrophic security breach!                          #
   #                                                        #
   ##########################################################
