
/*
 * Copyright 2008 2009 2010 Douglas Wikstrom
 *
 * This file is part of Vfork.
 *
 * Vfork is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Vfork is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Vfork.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

package mixnet.arithm;

import java.io.*;
import java.security.*;
import java.util.*;

import mixnet.arithm.*;
import mixnet.crypto.*;
import mixnet.eio.*;

import mixnet.test.*;

/**
 * Tests some of the functionality of {@link JECPGroup}.
 *
 * @author Douglas Wikstrom
 */
public class TestJECPGroup {

    protected static PGroup pGroup = null;
    protected static RandomSource rs;

    protected static void setupPGroup(TestParameters tp)
        throws Exception {
        if (pGroup == null) {
            rs = new PRGHeuristic();
            pGroup = JECPGroupParams.getJECPGroup("prime256v1");
        }
    }


    public static boolean encodeAndDecode(TestParameters tp) throws Exception {

        setupPGroup(tp);

        String s = "abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ";
        byte[] b = s.getBytes();

        byte[] res;

        res = pGroup.getONE().decode();
	if (res.length != 0) {
            return false;
	}

        for (int length = 0; length < pGroup.getEncodeLength(); length++) {

            byte[] t = Arrays.copyOfRange(b, 0, length);

            PGroupElement el = pGroup.encode(t, 0, length);
	    res = el.decode();
	    if (!Arrays.equals(t, res)) {
                return false;
	    }
        }
        return true;
    }

    public static boolean cornerCases(TestParameters tp) throws Exception {

        setupPGroup(tp);

        PGroupElement one = pGroup.getONE();

        if (!one.mul(one).equals(one)) {
            return false;
        }

        PGroupElement el = pGroup.randomElement(rs, 50);

        if (!one.mul(el).equals(el)) {
            return false;
        }

        if (!el.mul(one).equals(el)) {
            return false;
        }

        PGroupElement otherEl = pGroup.randomElement(rs, 50);

        if (!el.mul(otherEl).equals(otherEl.mul(el))) {
            return false;
        }

        return true;
    }

// JECN_BEGIN

    public static boolean exp(TestParameters tp)
        throws Exception {
        setupPGroup(tp);

	JECPGroupElement element =
            (JECPGroupElement)pGroup.randomElement(rs, 50);
	PRingElement exponent = pGroup.getPRing().randomElement(rs, 50);

	PGroupElement res1 = element.naiveExp(exponent);
	PGroupElement res2 = element.exp(exponent);

        if (!res1.equals(res2)) {
            return false;
        }
        return true;
    }

// JECN_END

}
